{"name":"Javacript-style-guide","tagline":"A mostly reasonable approach to JavaScript","body":"[元文書:https://github.com/airbnb/javascript](https://github.com/airbnb/javascript)\r\n\r\n# Airbnb JavaScript スタイルガイド() {\r\n\r\n*常に気をつけたい、JavaScriptへの正しい接し方*\r\n\r\n## <a name='TOC'><a name='TOC'>目次</a>\r\n\r\n  1. [型](#types)\r\n  1. [オブジェクト](#objects)\r\n  1. [配列](#arrays)\r\n  1. [文字列](#strings)\r\n  1. [関数](#functions)\r\n  1. [プロパティ](#properties)\r\n  1. [変数](#variables)\r\n  1. [巻き上げ](#hoisting)\r\n  1. [条件式と等価式](#conditionals)\r\n  1. [ブロック](#blocks)\r\n  1. [コメント](#comments)\r\n  1. [空白](#whitespace)\r\n  1. [カンマ](#commas)\r\n  1. [セミコロン](#semicolons)\r\n  1. [型変換と強制](#type-coercion)\r\n  1. [命名規則](#naming-conventions)\r\n  1. [アクセサ（Accessors）](#accessors)\r\n  1. [コンストラクタ](#constructors)\r\n  1. [イベント](#events)\r\n  1. [モジュール](#modules)\r\n  1. [jQuery](#jquery)\r\n  1. [ES5 互換性](#es5)\r\n  1. [テスト](#testing)\r\n  1. [パフォーマンスについての参考資料](#performance)\r\n  1. [情報源](#resources)\r\n  1. [共鳴者](#in-the-wild)\r\n  1. [翻訳](#translation) \r\n  1. [JavaScriptスタイルガイドへの手引き](#guide-guide)\r\n  1. [貢献者](#contributors)\r\n  1. [ライセンス](#license)\r\n\r\n## <a name='types'>型</a> [原文](https://github.com/airbnb/javascript#types)\r\n\r\n  - **プリミティブ型**: プリミティブ型は、その値を直接操作します。\r\n\r\n    + `string`\r\n    + `number`\r\n    + `boolean`\r\n    + `null`\r\n    + `undefined`\r\n\r\n    ```javascript\r\n    var foo = 1,\r\n        bar = foo;\r\n\r\n    bar = 9;\r\n\r\n    console.log(foo, bar); // => 1, 9\r\n    ```\r\n  - **参照型**: 参照型は、参照を通して値を操作します。\r\n\r\n    + `object`\r\n    + `array`\r\n    + `function`\r\n\r\n    ```javascript\r\n    var foo = [1, 2],\r\n        bar = foo;\r\n\r\n    bar[0] = 9;\r\n\r\n    console.log(foo[0], bar[0]); // => 9, 9\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='objects'>オブジェクト</a> [原文](https://github.com/airbnb/javascript#objects)\r\n\r\n  - オブジェクトを作成する際は、リテラル構文を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var item = new Object();\r\n\r\n    // good\r\n    var item = {};\r\n    ```\r\n\r\n  - [予約語](http://es5.github.io/#x7.6.1)をキーとして使用しないでください。これはIE8で動作しません。参照→[Issue](https://github.com/airbnb/javascript/issues/61)\r\n\r\n    ```javascript\r\n    // bad\r\n    var superman = {\r\n      default: { clark: 'kent' },\r\n      private: true\r\n    };\r\n\r\n    // good\r\n    var superman = {\r\n      defaults: { clark: 'kent' },\r\n      hidden: true\r\n    };\r\n    ````\r\n    \r\n  - 予約語の代わりに分かりやすい同義語を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var superman = {\r\n      class: 'alien'\r\n    };\r\n\r\n    // bad\r\n    var superman = {\r\n      klass: 'alien'\r\n    };\r\n\r\n    // good\r\n    var superman = {\r\n      type: 'alien'\r\n    };\r\n\r\n    ```\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='arrays'>配列</a> [原文](https://github.com/airbnb/javascript#arrays)\r\n\r\n  - 配列を作成する際は、リテラル構文を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var items = new Array();\r\n\r\n    // good\r\n    var items = [];\r\n    ```\r\n\r\n  - 長さが不明な場合はArray#pushを使用してください。\r\n  \r\n    ```javascript\r\n    var someStack = [];\r\n\r\n\r\n    // bad\r\n    someStack[someStack.length] = 'abracadabra';\r\n\r\n    // good\r\n    someStack.push('abracadabra');\r\n    ```\r\n\r\n  - 配列をコピーする必要がある場合、Array#sliceを使用してください。参考（英語）→[jsPerf](http://jsperf.com/converting-arguments-to-an-array/7)\r\n\r\n    ```javascript\r\n    var len = items.length,\r\n        itemsCopy = [],\r\n        i;\r\n\r\n    // bad\r\n    for (i = 0; i < len; i++) {\r\n      itemsCopy[i] = items[i];\r\n    }\r\n\r\n    // good\r\n    itemsCopy = items.slice();\r\n    ```\r\n\r\n  - Allay-LikeなオブジェクトをArrayに変換する場合は、Array#sliceを使用してください。\r\n  \r\n    ```javascript\r\n    function trigger() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n      ...\r\n    }\r\n   ```\r\n\r\n**[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='strings'>文字列</a> [原文](https://github.com/airbnb/javascript#strings)\r\n\r\n  - 文字列にはシングルクオート `''` を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var name = \"Bob Parr\";\r\n\r\n    // good\r\n    var name = 'Bob Parr';\r\n\r\n    // bad\r\n    var fullName = \"Bob \" + this.lastName;\r\n\r\n    // good\r\n    var fullName = 'Bob ' + this.lastName;\r\n    ```\r\n\r\n  - 80文字以上の文字列は、文字列連結を使用して複数行にまたがって記述する必要があります。\r\n  - 注意: 文字連結を多用した場合、パフォーマンスに影響を与えることがあります。参考（英語）→[jsPerf](http://jsperf.com/ya-string-concat) & [Discussion](https://github.com/airbnb/javascript/issues/40)\r\n\r\n    ```javascript\r\n    // bad\r\n    var errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\r\n\r\n    // bad\r\n    var errorMessage = 'This is a super long error that \\\r\n    was thrown because of Batman. \\\r\n    When you stop to think about \\\r\n    how Batman had anything to do \\\r\n    with this, you would get nowhere \\\r\n    fast.';\r\n\r\n\r\n    // good\r\n    var errorMessage = 'This is a super long error that ' +\r\n      'was thrown because of Batman.' +\r\n      'When you stop to think about ' +\r\n      'how Batman had anything to do ' +\r\n      'with this, you would get nowhere ' +\r\n      'fast.';\r\n    ```\r\n\r\n  - プログラムにて文字列を生成する必要がある場合は、（特にIEは）文字列連結の代わりにArray#joinを使用してください。参考（英語）→[jsPerf](http://jsperf.com/string-vs-array-concat/2).\r\n\r\n    ```javascript\r\n    var items,\r\n        messages,\r\n        length, i;\r\n\r\n    messages = [{\r\n        state: 'success',\r\n        message: 'This one worked.'\r\n    },{\r\n        state: 'success',\r\n        message: 'This one worked as well.'\r\n    },{\r\n        state: 'error',\r\n        message: 'This one did not work.'\r\n    }];\r\n\r\n    length = messages.length;\r\n\r\n    // bad\r\n    function inbox(messages) {\r\n      items = '\r\n';\r\n\r\n      for (i = 0; i < length; i++) {\r\n        items += '\r\n' + messages[i].message + '\r\n';\r\n      }\r\n\r\n      return items + '\r\n';\r\n    }\r\n\r\n    // good\r\n    function inbox(messages) {\r\n      items = [];\r\n\r\n      for (i = 0; i < length; i++) {\r\n        items[i] = messages[i].message;\r\n      }\r\n\r\n      return '\r\n' + items.join('\r\n') + '\r\n';\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='functions'>関数</a> [原文](https://github.com/airbnb/javascript#functions)\r\n\r\n  - 関数式\r\n\r\n    ```javascript\r\n    // 無名関数\r\n    var anonymous = function() {\r\n      return true;\r\n    };\r\n\r\n    // 名前付き関数\r\n    var named = function named() {\r\n      return true;\r\n    };\r\n\r\n    // 即時関数\r\n    (function() {\r\n      console.log('Welcome to the Internet. Please follow me.');\r\n    })();\r\n    ```\r\n\r\n  - （ifやwhileなど）ブロック内で、変数に関数を代入する代わりに関数を宣言しないでください。ブラウザはそのことを許可しますが、（それはまるで「頑張れベアーズ」の悪ガキ達のように）すべて違ったように解釈されます。\r\n  - **注意:** ECMA-262 では `block` はstatementsの一覧に定義されていますが、関数宣言はstatementsではありません。[この問題についてはECMA-262の記述を参照してください。](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97).\r\n\r\n    ```javascript\r\n    // bad\r\n    if (currentUser) {\r\n      function test() {\r\n        console.log('Nope.');\r\n      }\r\n    }\r\n\r\n    // good\r\n    if (currentUser) {\r\n      var test = function test() {\r\n        console.log('Yup.');\r\n      };\r\n    }\r\n    ```\r\n\r\n  - パラメータに `arguments` を指定しないでください。これは、関数スコープに渡される `arguments` オブジェクトの参照を上書きしてしまうためです。\r\n\r\n    ```javascript\r\n    // bad\r\n    function nope(name, options, arguments) {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    function yup(name, options, args) {\r\n      // ...stuff...\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n\r\n## <a name='properties'>プロパティ</a> [原文](https://github.com/airbnb/javascript#properties)\r\n\r\n  - プロパティにアクセスする場合は、ドット `.` を使用してください。\r\n\r\n    ```javascript\r\n    var luke = {\r\n      jedi: true,\r\n      age: 28\r\n    };\r\n\r\n    // bad\r\n    var isJedi = luke['jedi'];\r\n\r\n    // good\r\n    var isJedi = luke.jedi;\r\n    ```\r\n\r\n  - 変数を使用してプロパティにアクセスする場合は、角括弧 `[]` を使用してください。\r\n\r\n    ```javascript\r\n    var luke = {\r\n      jedi: true,\r\n      age: 28\r\n    };\r\n\r\n    function getProp(prop) {\r\n      return luke[prop];\r\n    }\r\n\r\n    var isJedi = getProp('jedi');\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='variables'>変数</a> [原文](https://github.com/airbnb/javascript#variables)\r\n\r\n  - 変数を宣言する際は、常に `var` を使用してください。使用しない場合、グローバル変数として宣言されます。グローバルな名前空間を汚染しないように、キャプテンプラネット（環境保護とエコロジーをテーマにしたスーパーヒーローアニメ）も警告しています。\r\n\r\n    ```javascript\r\n    // bad\r\n    superPower = new SuperPower();\r\n\r\n    // good\r\n    var superPower = new SuperPower();\r\n    ```\r\n\r\n  - 複数の変数を宣言する場合は、1つの `var` を使用し、変数ごとに改行して宣言してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var items = getItems();\r\n    var goSportsTeam = true;\r\n    var dragonball = 'z';\r\n\r\n    // good\r\n    var items = getItems(),\r\n        goSportsTeam = true,\r\n        dragonball = 'z';\r\n    ```\r\n\r\n  - 未定義変数を最後に宣言してください。これは、後ほど既に割り当て済みの変数のいずれかを、割り当てる必要がある場合に便利です。\r\n\r\n    ```javascript\r\n    // bad\r\n    var i, len, dragonball,\r\n        items = getItems(),\r\n        goSportsTeam = true;\r\n\r\n    // bad\r\n    var i, items = getItems(),\r\n        dragonball,\r\n        goSportsTeam = true,\r\n        len;\r\n\r\n    // good\r\n    var items = getItems(),\r\n        goSportsTeam = true,\r\n        dragonball,\r\n        i, \r\n        length;\r\n    ```\r\n\r\n  - 変数の割り当てはスコープの先頭で行ってください。これは、変数宣言と巻上げに関連する問題を回避するためです。\r\n\r\n    ```javascript\r\n    // bad\r\n    function() {\r\n      test();\r\n      console.log('doing stuff..');\r\n\r\n      //..other stuff..\r\n\r\n      var name = getName();\r\n\r\n      if (name === 'test') {\r\n        return false;\r\n      }\r\n\r\n      return name;\r\n    }\r\n\r\n    // good\r\n    function() {\r\n      var name = getName();\r\n\r\n      test();\r\n      console.log('doing stuff..');\r\n\r\n      //..other stuff..\r\n\r\n      if (name === 'test') {\r\n        return false;\r\n      }\r\n\r\n      return name;\r\n    }\r\n\r\n    // bad\r\n    function() {\r\n      var name = getName();\r\n\r\n      if (!arguments.length) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    // good\r\n    function() {\r\n      if (!arguments.length) {\r\n        return false;\r\n      }\r\n\r\n      var name = getName();\r\n\r\n      return true;\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='hoisting'>巻き上げ</a> [原文](https://github.com/airbnb/javascript#hoisting)\r\n\r\n  - 未割当ての変数は、そのスコープの先頭に巻き上げられます。\r\n\r\n    ```javascript\r\n    // （notDefinedがグローバル変数に存在しないと仮定した場合。）\r\n    // これはうまく動作しません。\r\n    function example() {\r\n      console.log(notDefined); // => throws a ReferenceError\r\n    }\r\n\r\n    // その変数を参照するコードの後でその変数を宣言した場合、\r\n    // 変数が巻上げられた上で動作します。\r\n    // 注意：`true` という値自体は巻き上げられません。\r\n    function example() {\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      var declaredButNotAssigned = true;\r\n    }\r\n\r\n    // インタープリンタは変数宣言をスコープの先頭に巻き上げます。\r\n    // 上の例は次のように書き直すことが出来ます。\r\n    function example() {\r\n      var declaredButNotAssigned;\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      declaredButNotAssigned = true;\r\n    }\r\n    ```\r\n\r\n  - 無名関数の場合、関数が割当てされる前の変数が巻き上げられます。\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(anonymous); // => undefined\r\n\r\n      anonymous(); // => TypeError anonymous is not a function\r\n\r\n      var anonymous = function() {\r\n        console.log('anonymous function expression');\r\n      };\r\n    }\r\n    ```\r\n\r\n  - 名前付き関数の場合も同様に変数が巻き上げられます。関数名や関数本体は巻き上げられません。\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      superPower(); // => ReferenceError superPower is not defined\r\n\r\n      var named = function superPower() {\r\n        console.log('Flying');\r\n      };\r\n\r\n\r\n      // 関数名と変数名が同じ場合も同じことが起きます。\r\n      function example() {\r\n        console.log(named); // => undefined\r\n\r\n        named(); // => TypeError named is not a function\r\n\r\n        var named = function named() {\r\n          console.log('named');\r\n        };\r\n      }\r\n    }\r\n    ```\r\n\r\n  - 関数宣言は関数名と関数本体が巻き上げられます。\r\n\r\n    ```javascript\r\n    function example() {\r\n      superPower(); // => Flying\r\n\r\n      function superPower() {\r\n        console.log('Flying');\r\n      }\r\n    }\r\n    ```\r\n\r\n  - さらに詳細な情報を求める場合は[Ben Cherry](http://www.adequatelygood.com/)による[JavaScript Scoping & Hoisting](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting)を参照してください。\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n\r\n## <a name='conditionals'>条件式と等価式</a> [原文](https://github.com/airbnb/javascript#conditionals)\r\n\r\n  - `==` や`!=`より `===` と `!==` を使用してください。 \r\n  - 条件式は `ToBoolean` メソッドにより厳密に比較されます。常にこのシンプルはルールに従ってください。\r\n\r\n    + **オブジェクト** は **true** と評価されます。\r\n    + **undefined** は **false** と評価されます。\r\n    + **null** は **false** と評価されます。\r\n    + **真偽値** は **boolean型の値** として評価されます。\r\n    + **数値** は **true** と評価されます。しかし、 **+0, -0, or NaN** の場合は **false** です。\r\n    + **文字列** は **true** と評価されます。 しかし、空文字 `''` の場合は **false** です。\r\n\r\n\r\n    ```javascript\r\n    if ([0]) {\r\n      // true\r\n      // 配列はオブジェクトなのでtrueとして評価されます。\r\n    }\r\n    ```\r\n\r\n  - 短縮形を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    if (name !== '') {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    if (name) {\r\n      // ...stuff...\r\n    }\r\n\r\n    // bad\r\n    if (collection.length > 0) {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    if (collection.length) {\r\n      // ...stuff...\r\n    }\r\n    ```\r\n\r\n  - さらに詳細な情報を求める場合はAngus Crollによる [Truth Equality and JavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108)を参照してください。\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='blocks'>ブロック</a> [原文](https://github.com/airbnb/javascript#blocks)\r\n\r\n  - 複数行のブロックには中括弧（{}）を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    if (test)\r\n      return false;\r\n\r\n    // good\r\n    if (test) return false;\r\n\r\n    // good\r\n    if (test) {\r\n      return false;\r\n    }\r\n\r\n    // bad\r\n    function() { return false; }\r\n\r\n    // good\r\n    function() {\r\n      return false;\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='comments'>コメント</a> [原文](https://github.com/airbnb/javascript#comments)\r\n\r\n  - 複数行のコメントは`/** ... */` を使用してください。その中には説明とすべてのパラメータと戻り値についての型や値を記述してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    // make() returns a new element\r\n    // based on the passed in tag name\r\n    //\r\n    // @param  tag\r\n    // @return  element\r\n    function make(tag) {\r\n\r\n      // ...stuff...\r\n\r\n      return element;\r\n    }\r\n\r\n    // good\r\n    /**\r\n     * make() returns a new element\r\n     * based on the passed in tag name\r\n     *\r\n     * @param  tag\r\n     * @return  element\r\n     */\r\n    function make(tag) {\r\n\r\n      // ...stuff...\r\n\r\n      return element;\r\n    }\r\n    ```\r\n\r\n  - 単一行コメントには`//` を使用してください。コメントを加えたいコードの上部に配置してください。また、コメントの前に空行を入れてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var active = true;  // is current tab\r\n\r\n    // good\r\n    // is current tab\r\n    var active = true;\r\n\r\n    // bad\r\n    function getType() {\r\n      console.log('fetching type...');\r\n      // set the default type to 'no type'\r\n      var type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n\r\n    // good\r\n    function getType() {\r\n      console.log('fetching type...');\r\n\r\n      // set the default type to 'no type'\r\n      var type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n    ```\r\n\r\n  - 問題を指摘して再考を促す場合や、問題の解決策を提案する場合など、コメントの前に `FIXME` や `TODO` を付けることで他のデベロッパの素早い理解を助けることができます。これらは、何らかのアクションを伴うという意味で通常のコメントとは異なります。アクションとは `FIXME -- 解決策が必要` もしくは `TODO -- 実装が必要` です。\r\n\r\n\r\n  - 問題に対する注釈として `// FIXME:` を使用してください。\r\n\r\n    ```javascript\r\n    function Calculator() {\r\n\r\n      // FIXME: グローバル変数を使用するべきではない。\r\n      total = 0;\r\n\r\n      return this;\r\n    }\r\n    ```\r\n\r\n  - 問題の解決策に対する注釈として `// TODO:` を使用してください。\r\n\r\n    ```javascript\r\n    function Calculator() {\r\n\r\n      // TODO: total はオプションパラメータとして設定されるべき。\r\n      this.total = 0;\r\n      return this;\r\n    }\r\n  ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='whitespace'>空白</a> [原文](https://github.com/airbnb/javascript#whitespace)\r\n\r\n  - タブにはスペース2つを設定してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    function() {\r\n    ∙∙∙∙var name;\r\n    }\r\n\r\n    // bad\r\n    function() {\r\n    ∙var name;\r\n    }\r\n\r\n    // good\r\n    function() {\r\n    ∙∙var name;\r\n    }\r\n    ```\r\n  - 重要な中括弧（{}）の前にはスペースを1つ入れてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    function test(){\r\n      console.log('test');\r\n    }\r\n\r\n    // good\r\n    function test() {\r\n      console.log('test');\r\n    }\r\n\r\n    // bad\r\n    dog.set('attr',{\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog'\r\n    });\r\n\r\n    // good\r\n    dog.set('attr', {\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog'\r\n    });\r\n    ```\r\n  - ファイルの最後は空行を1つ入れてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    (function(global) {\r\n      // ...stuff...\r\n    })(this);\r\n    ```\r\n\r\n    ```javascript\r\n    // good\r\n    (function(global) {\r\n      // ...stuff...\r\n    })(this);\r\n\r\n    ```\r\n\r\n  - メソッドチェーンが長くなる場合は、適宜インデントしてください。\r\n\r\n  ```javascript\r\n  // bad\r\n  $('#items').find('.selected').highlight().end().find('.open').updateCount();\r\n\r\n  // good\r\n  $('#items')\r\n    .find('.selected')\r\n      .highlight()\r\n      .end()\r\n    .find('.open')\r\n      .updateCount();\r\n\r\n  // bad\r\n  var leds = stage.selectAll('.led').data(data).enter().append('svg:svg').class('led', true)\r\n      .attr('width',  (radius + margin) * 2).append('svg:g')\r\n      .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\r\n      .call(tron.led);\r\n\r\n  // good\r\n  var leds = stage.selectAll('.led')\r\n      .data(data)\r\n    .enter().append('svg:svg')\r\n      .class('led', true)\r\n      .attr('width',  (radius + margin) * 2)\r\n    .append('svg:g')\r\n      .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\r\n      .call(tron.led);\r\n  ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='commas'>カンマ</a> [原文](https://github.com/airbnb/javascript#commas)\r\n\r\n  - 先頭のカンマは **やめてください。**\r\n\r\n    ```javascript\r\n    // bad\r\n    var once\r\n      , upon\r\n      , aTime;\r\n\r\n    // good\r\n    var once,\r\n        upon,\r\n        aTime;\r\n\r\n    // bad\r\n    var hero = {\r\n        firstName: 'Bob'\r\n      , lastName: 'Parr'\r\n      , heroName: 'Mr. Incredible'\r\n      , superPower: 'strength'\r\n    };\r\n\r\n    // good\r\n    var hero = {\r\n      firstName: 'Bob',\r\n      lastName: 'Parr',\r\n      heroName: 'Mr. Incredible',\r\n      superPower: 'strength'\r\n    };\r\n    ```\r\n\r\n　- 末尾の余計なカンマも **やめてください。** これはIE6/7とquirksmodeのIE9で問題を引き起こす可能性があります。\r\n  さらに、ES3のいくつかの実装において、余計なカンマがある場合、配列に長さを追加します。\r\n  これは、ES5の中で明らかにされました。([参考](http://es5.github.io/#D)):\r\n\r\n  > 第5版では、末尾の余計なカンマが存在するArrayInitialiser（配列初期化演算子）であっても、配列に長さを追加しないという事実を明確にしています。\r\nこれは第3版から意味的な変更ではありませんが、いくつかの実装は以前よりこれを誤解していたかもしれません。\r\n\r\n  ```javascript\r\n    // bad\r\n    var hero = {\r\n      firstName: 'Kevin',\r\n      lastName: 'Flynn',\r\n    };\r\n\r\n    var heroes = [\r\n      'Batman',\r\n      'Superman',\r\n    ];\r\n\r\n    // good\r\n    var hero = {\r\n      firstName: 'Kevin',\r\n      lastName: 'Flynn'\r\n    };\r\n\r\n    var heroes = [\r\n      'Batman',\r\n      'Superman'\r\n    ];\r\n  ```\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='semicolons'>セミコロン</a> [原文](https://github.com/airbnb/javascript#semicolons)\r\n\r\n  - **もちろん使いましょう。**\r\n\r\n    ```javascript\r\n    // bad\r\n    (function() {\r\n      var name = 'Skywalker'\r\n      return name\r\n    })()\r\n\r\n    // good\r\n    (function() {\r\n      var name = 'Skywalker';\r\n      return name;\r\n    })();\r\n\r\n    // good\r\n    ;(function() {\r\n      var name = 'Skywalker';\r\n      return name;\r\n    })();\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='type-coercion'>型変換と強制</a> [原文](https://github.com/airbnb/javascript#type-coercion)\r\n\r\n  - 文の先頭で型の強制を行います。\r\n  - 文字列\r\n\r\n    ```javascript\r\n    //  => this.reviewScore = 9;\r\n\r\n    // bad\r\n    var totalScore = this.reviewScore + '';\r\n\r\n    // good\r\n    var totalScore = '' + this.reviewScore;\r\n\r\n    // bad\r\n    var totalScore = '' + this.reviewScore + ' total score';\r\n\r\n    // good\r\n    var totalScore = this.reviewScore + ' total score';\r\n    ```\r\n\r\n  - 数値には`parseInt` を使用てください。常に型変換のための基数を引数に渡してください。\r\n \r\n    ```javascript\r\n    var inputValue = '4';\r\n\r\n    // bad\r\n    var val = new Number(inputValue);\r\n\r\n    // bad\r\n    var val = +inputValue;\r\n\r\n    // bad\r\n    var val = inputValue >> 0;\r\n\r\n    // bad\r\n    var val = parseInt(inputValue);\r\n\r\n    // good\r\n    var val = Number(inputValue);\r\n\r\n    // good\r\n    var val = parseInt(inputValue, 10);\r\n    ````\r\n\r\n  - 何らかの理由により `parseInt` がボトルネックとなっており、[パフォーマンス的な理由](http://jsperf.com/coercion-vs-casting/3)でビッシフトを使用す必要がある場合、\r\n  やろうとしている事について、why（なぜ）とwhat（何を）の説明をコメントとして残してください。\r\n\r\n    ```javascript\r\n    // good\r\n    /**\r\n     * parseIntがボトルネックとなっていたため、\r\n     * ビットシフトで文字列を数値へ強制的に変換することで\r\n     * パフォーマンスを改善させます。\r\n     */\r\n    var val = inputValue >> 0;\r\n    ```\r\n\r\n  - 真偽値\r\n\r\n    ```javascript\r\n    var age = 0;\r\n\r\n    // bad\r\n    var hasAge = new Boolean(age);\r\n\r\n    // good\r\n    var hasAge = Boolean(age);\r\n\r\n    // good\r\n    var hasAge = !!age;\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='naming-conventions'>命名規則</a> [原文](https://github.com/airbnb/javascript#naming-conventions)\r\n\r\n  - 1文字の名前は避けてください。 名前から意図が読み取れるようにしてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    function q() {\r\n      // ...stuff...\r\n    }\r\n\r\n    // good\r\n    function query() {\r\n      // ..stuff..\r\n    }\r\n    ```\r\n\r\n  - オブジェクト、関数、インスタンスにはキャメルケース（小文字から始まる）を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var OBJEcttsssss = {};\r\n    var this_is_my_object = {};\r\n    var this-is-my-object = {};\r\n    function c() {};\r\n    var u = new user({\r\n      name: 'Bob Parr'\r\n    });\r\n\r\n    // good\r\n    var thisIsMyObject = {};\r\n    function thisIsMyFunction() {};\r\n    var user = new User({\r\n      name: 'Bob Parr'\r\n    });\r\n    ```\r\n\r\n  - クラスやコンストラクタにはパスカルケース（大文字から始まる）を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    function user(options) {\r\n      this.name = options.name;\r\n    }\r\n\r\n    var bad = new user({\r\n      name: 'nope'\r\n    });\r\n\r\n    // good\r\n    function User(options) {\r\n      this.name = options.name;\r\n    }\r\n\r\n    var good = new User({\r\n      name: 'yup'\r\n    });\r\n    ```\r\n\r\n  - プライベートなプロパティ名は先頭にアンダースコア `_` を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    this.__firstName__ = 'Panda';\r\n    this.firstName_ = 'Panda';\r\n    \r\n    // good\r\n    this._firstName = 'Panda';\r\n    ```\r\n\r\n  - `this` の参照を保存する場合、 `_this` を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    function() {\r\n      var self = this;\r\n      return function() {\r\n        console.log(self);\r\n      };\r\n    }\r\n\r\n    // bad\r\n    function() {\r\n      var that = this;\r\n      return function() {\r\n        console.log(that);\r\n      };\r\n    }\r\n\r\n    // good\r\n    function() {\r\n      var _this = this;\r\n      return function() {\r\n        console.log(_this);\r\n      };\r\n    }\r\n    ```\r\n\r\n  - 関数には名前を付けてください。これは、スタックトレースが追跡し易くなるためです。\r\n\r\n    ```javascript\r\n    // bad\r\n    var log = function(msg) {\r\n      console.log(msg);\r\n    };\r\n\r\n    // good\r\n    var log = function log(msg) {\r\n      console.log(msg);\r\n    };\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='accessors'>アクセサ（Accessors）</a> [原文](https://github.com/airbnb/javascript#accessors)\r\n\r\n  - プロパティのためのアクセサ（Accessor）関数は必須ではありません。\r\n  - アクセサ関数が必要な場合、`getVal()` や `setVal('hello')` としてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    dragon.age();\r\n\r\n    // good\r\n    dragon.getAge();\r\n\r\n    // bad\r\n    dragon.age(25);\r\n\r\n    // good\r\n    dragon.setAge(25);\r\n    ```\r\n\r\n  - プロパティが真偽値の場合、`isVal()` や`hasVal()` としてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    if (!dragon.age()) {\r\n      return false;\r\n    }\r\n  \r\n    // good\r\n    if (!dragon.hasAge()) {\r\n      return false;\r\n    }\r\n    ```\r\n\r\n  - 一貫していれば、`get()` や`set()` という関数を作成することも可能です。\r\n\r\n    ```javascript\r\n    function Jedi(options) {\r\n      options || (options = {});\r\n      var lightsaber = options.lightsaber || 'blue';\r\n      this.set('lightsaber', lightsaber);\r\n    }\r\n\r\n    Jedi.prototype.set = function(key, val) {\r\n      this[key] = val;\r\n    };\r\n\r\n    Jedi.prototype.get = function(key) {\r\n      return this[key];\r\n    };\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='constructors'>コンストラクタ</a> [原文](https://github.com/airbnb/javascript#constructors)\r\n\r\n  - 新しいオブジェクトでプロトタイプをオーバーライドするのではなく、プロトタイプオブジェクトにメソッドを追加してください。プロトタイプをオーバーライドすると継承が不可能になります。プロトタイプをリセットすることで、基底クラスをオーバーライドできます。\r\n\r\n    ```javascript\r\n    function Jedi() {\r\n      console.log('new jedi');\r\n    }\r\n\r\n    // bad\r\n    Jedi.prototype = {\r\n      fight: function fight() {\r\n        console.log('fighting');\r\n      },\r\n\r\n      block: function block() {\r\n        console.log('blocking');\r\n      }\r\n    };\r\n\r\n    // good\r\n    Jedi.prototype.fight = function fight() {\r\n      console.log('fighting');\r\n    };\r\n\r\n    Jedi.prototype.block = function block() {\r\n      console.log('blocking');\r\n    };\r\n    ```\r\n\r\n  - メソッドの戻り値で `this` を返すことで、メソッドチェーンをすることができます。\r\n\r\n    ```javascript\r\n    // bad\r\n    Jedi.prototype.jump = function() {\r\n      this.jumping = true;\r\n      return true;\r\n    };\r\n\r\n    Jedi.prototype.setHeight = function(height) {\r\n      this.height = height;\r\n    };\r\n\r\n    var luke = new Jedi();\r\n    luke.jump(); // => true\r\n    luke.setHeight(20) // => undefined\r\n\r\n    // good\r\n    Jedi.prototype.jump = function() {\r\n      this.jumping = true;\r\n      return this;\r\n    };\r\n\r\n    Jedi.prototype.setHeight = function(height) {\r\n      this.height = height;\r\n      return this;\r\n    };\r\n\r\n    var luke = new Jedi();\r\n\r\n    luke.jump()\r\n      .setHeight(20);\r\n    ```\r\n\r\n\r\n  - 独自のtoString()を作成することもできますが、正しく動作すること、副作用がないことだけは確認してください。\r\n\r\n\r\n    ```javascript\r\n    function Jedi(options) {\r\n      options || (options = {});\r\n      this.name = options.name || 'no name';\r\n    }\r\n\r\n    Jedi.prototype.getName = function getName() {\r\n      return this.name;\r\n    };\r\n\r\n    Jedi.prototype.toString = function toString() {\r\n      return 'Jedi - ' + this.getName();\r\n    };\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n## <a name='events'>イベント</a>\r\n\r\n  - （DOMイベントやBackbone eventsのような独自の）イベントへペイロードの値を渡す場合は、生の値の代わりにハッシュ引数を渡してください。\r\nこうすることで、後の開発者がイベントに関連する全てのハンドラを見つけて更新することなく、イベント・ぺイロードに値を追加することが出来ます。例えば、これの代わりに:\r\n\r\n    ```js\r\n    // bad\r\n    $(this).trigger('listingUpdated', listing.id);\r\n\r\n    ...\r\n\r\n    $(this).on('listingUpdated', function(e, listingId) {\r\n      // do something with listingId\r\n    });\r\n    ```\r\n\r\n    こちら方が好まれます。:\r\n\r\n    ```js\r\n    // good\r\n    $(this).trigger('listingUpdated', { listingId : listing.id });\r\n\r\n    ...\r\n\r\n    $(this).on('listingUpdated', function(e, data) {\r\n    // do something with data.listingId\r\n    });\r\n    ```\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n## <a name='modules'>モジュール</a> [原文](https://github.com/airbnb/javascript#modules)\r\n\r\n  - モジュールは `!` で始めてください。これは、文末のセミコロンを付け忘れたモジュールを連結した場合、実行時にエラーが発生しないためです。\r\n  - ファイル名はキャメルケースを使用し、同じ名称のフォルダに格納してください。また、単独で公開する場合は、名前を一致させてください。\r\n  - noConflict()という名称で、(名前衝突して上書きされる前の)モジュールを返すメソッドを追加してください。\r\n  - 常にモジュールの先頭で`'use strict';` を宣言してください。\r\n\r\n    ```javascript\r\n    // fancyInput/fancyInput.js\r\n\r\n    !function(global) {\r\n      'use strict';\r\n\r\n      var previousFancyInput = global.FancyInput;\r\n\r\n      function FancyInput(options) {\r\n        this.options = options || {};\r\n      }\r\n\r\n      FancyInput.noConflict = function noConflict() {\r\n        global.FancyInput = previousFancyInput;\r\n        return FancyInput;\r\n      };\r\n\r\n      global.FancyInput = FancyInput;\r\n    }(this);\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='jquery'>jQuery</a> [原文](https://github.com/airbnb/javascript#jquery)\r\n\r\n  - jQueryオブジェクトの変数は、先頭に `$` を付与してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    var sidebar = $('.sidebar');\r\n\r\n    // good\r\n    var $sidebar = $('.sidebar');\r\n    ```\r\n\r\n  - jQueryの検索結果をキャッシュしてください。\r\n\r\n    ```javascript\r\n    // bad\r\n    function setSidebar() {\r\n      $('.sidebar').hide();\r\n\r\n      // ...stuff...\r\n\r\n      $('.sidebar').css({\r\n        'background-color': 'pink'\r\n      });\r\n    }\r\n\r\n    // good\r\n    function setSidebar() {\r\n      var $sidebar = $('.sidebar');\r\n      $sidebar.hide();\r\n\r\n      // ...stuff...\r\n\r\n      $sidebar.css({\r\n        'background-color': 'pink'\r\n      });\r\n    }\r\n    ```\r\n\r\n  - DOMの検索には、 `$('.sidebar ul')` や `$('.sidebar > ul')` のカスケードを使用してください。 参考（英語）→[jsPerf](http://jsperf.com/jquery-find-vs-context-sel/16)\r\n\r\n  - jQueryオブジェクトの検索には、スコープ付きの `find` を使用してください。\r\n\r\n    ```javascript\r\n    // bad\r\n    $('.sidebar', 'ul').hide();\r\n\r\n    // bad\r\n    $('.sidebar').find('ul').hide();\r\n\r\n    // good\r\n    $('.sidebar ul').hide();\r\n\r\n    // good\r\n    $('.sidebar > ul').hide();\r\n\r\n    // good (slower)\r\n    $sidebar.find('ul');\r\n\r\n    // good (faster)\r\n    $($sidebar[0]).find('ul');\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='es5'>ECMAScript 5 互換性</a> [原文](https://github.com/airbnb/javascript#es5)\r\n\r\n  - [Kangax](https://twitter.com/kangax/)の ES5 [互換表](http://kangax.github.com/es5-compat-table/)を参照してください。\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='testing'>テスト</a> [原文](https://github.com/airbnb/javascript#testing)\r\n\r\n  - **もちろん**\r\n\r\n    ```javascript\r\n    function() {\r\n      return true;\r\n    }\r\n    ```\r\n\r\n    **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='performance'>パフォーマンスについての参考資料</a> [原文](https://github.com/airbnb/javascript#performance)\r\n\r\n  - [String vs Array Concat](http://jsperf.com/string-vs-array-concat/2)\r\n  - [Try/Catch Cost In a Loop](http://jsperf.com/try-catch-in-loop-cost)\r\n  - [Bang Function](http://jsperf.com/bang-function)\r\n  - [jQuery Find vs Context, Selector](http://jsperf.com/jquery-find-vs-context-sel/13)\r\n  - [innerHTML vs textContent for script text](http://jsperf.com/innerhtml-vs-textcontent-for-script-text)\r\n  - [Long String Concatenation](http://jsperf.com/ya-string-concat)\r\n  - Loading...\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n\r\n## <a name='resources'>情報源</a> [原文](https://github.com/airbnb/javascript#resources)\r\n\r\n\r\n**まず、これを読んでください。**\r\n\r\n  - [注釈付き ECMAScript 5.1](http://es5.github.com/)\r\n\r\n**他のスタイルガイド**\r\n\r\n  - [Google JavaScript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml)\r\n  - [jQuery Core Style Guidelines](http://docs.jquery.com/JQuery_Core_Style_Guidelines)\r\n  - [Principles of Writing Consistent, Idiomatic JavaScript](https://github.com/rwldrn/idiomatic.js/)\r\n\r\n**スタイルについての他の意見**\r\n\r\n  - [Naming this in nested functions](https://gist.github.com/4135065) - Christian Johansen\r\n  - [Conditional Callbacks](https://github.com/airbnb/javascript/issues/52)\r\n\r\n**参考文献**\r\n\r\n  - [Understanding JavaScript Closures](http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/) - Angus Croll\r\n\r\n**参考図書**\r\n\r\n  - [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) - Douglas Crockford\r\n  - [JavaScript Patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) - Stoyan Stefanov\r\n  - [Pro JavaScript Design Patterns](http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X)  - Ross Harmes and Dustin Diaz\r\n  - [High Performance Web Sites: Essential Knowledge for Front-End Engineers](http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309) - Steve Souders\r\n  - [Maintainable JavaScript](http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680) - Nicholas C. Zakas\r\n  - [JavaScript Web Applications](http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X) - Alex MacCaw\r\n  - [Pro JavaScript Techniques](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273) - John Resig\r\n  - [Smashing Node.js: JavaScript Everywhere](http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595) - Guillermo Rauch\r\n\r\n**Blogs**\r\n\r\n  - [DailyJS](http://dailyjs.com/)\r\n  - [JavaScript Weekly](http://javascriptweekly.com/)\r\n  - [JavaScript, JavaScript...](http://javascriptweblog.wordpress.com/)\r\n  - [Bocoup Weblog](http://weblog.bocoup.com/)\r\n  - [Adequately Good](http://www.adequatelygood.com/)\r\n  - [NCZOnline](http://www.nczonline.net/)\r\n  - [Perfection Kills](http://perfectionkills.com/)\r\n  - [Ben Alman](http://benalman.com/)\r\n  - [Dmitry Baranovskiy](http://dmitry.baranovskiy.com/)\r\n  - [Dustin Diaz](http://dustindiaz.com/)\r\n  - [nettuts](http://net.tutsplus.com/?s=javascript)\r\n\r\n  **[[⬆]](#TOC)**\r\n\r\n## <a name='in-the-wild'>共鳴者</a> [原文](https://github.com/airbnb/javascript#in-the-wild)\r\n\r\n_訳注: 原文は「in the wild:感染者」となっている。_\r\n\r\n  これはこのスタイルガイドを使用している組織の一覧表です。このリストに追加して欲しい場合は、pull requestかissueを挙げてください。\r\n\r\n  - **Airbnb**: [airbnb/javascript](https://github.com/airbnb/javascript)\r\n  - **American Insitutes for Research**: [AIRAST/javascript](https://github.com/AIRAST/javascript)\r\n  - **Compass Learning**: [compasslearning/javascript-style-guide](https://github.com/compasslearning/javascript-style-guide)\r\n  - **ExactTarget**: [ExactTarget/javascript](https://github.com/ExactTarget/javascript)\r\n  - **GeneralElectric**: [GeneralElectric/javascript](https://github.com/GeneralElectric/javascript)\r\n  - **GoodData**: [gooddata/gdc-js-style](https://github.com/gooddata/gdc-js-style)\r\n  - **How About We**: [howaboutwe/javascript](https://github.com/howaboutwe/javascript)\r\n  - **MinnPost**: [MinnPost/javascript](https://github.com/MinnPost/javascript)\r\n  - **ModCloth**: [modcloth/javascript](https://github.com/modcloth/javascript)\r\n   - **National Geographic**: [natgeo/javascript](https://github.com/natgeo/javascript)\r\n   - **National Park Service**: [nationalparkservice/javascript](https://github.com/nationalparkservice/javascript)\r\n  - **Razorfish**: [razorfish/javascript-style-guide](https://github.com/razorfish/javascript-style-guide)\r\n  - **Shutterfly**: [shutterfly/javascript](https://github.com/shutterfly/javascript)\r\n  - **Userify**: [userify/javascript](https://github.com/userify/javascript)\r\n  - **Zillow**: [zillow/javascript](https://github.com/zillow/javascript)\r\n  - **ZocDoc**: [ZocDoc/javascript](https://github.com/ZocDoc/javascript)\r\n\r\n## <a name='translation'>翻訳</a> [原文](https://github.com/airbnb/javascript#translation)\r\n\r\n  このスタイルガイドは他の言語でも利用できます。\r\n \r\n - :de: **ドイツ語**: [timofurrer/javascript-style-guide](https://github.com/timofurrer/javascript-style-guide)\r\n - :jp: **日本語**: [mitsuruog/javacript-style-guide](https://github.com/mitsuruog/javacript-style-guide)\r\n - :br: **ポルトガル語**: [armoucar/javascript-style-guide](https://github.com/armoucar/javascript-style-guide)\r\n - :cn: **中国語**: [adamlu/javascript-style-guide](https://github.com/adamlu/javascript-style-guide)\r\n\r\n\r\n## <a name='guide-guide'>JavaScriptスタイルガイドへの手引き</a> [原文](https://github.com/airbnb/javascript#guide-guide)\r\n\r\n  - [こちらを参照](https://github.com/mitsuruog/javacript-style-guide/wiki/JavaScript%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%AC%E3%82%A4%E3%83%89%E3%81%B8%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D)\r\n\r\n## <a name='contributors'>貢献者</a> [原文](https://github.com/airbnb/javascript#contributors)\r\n\r\n  - [貢献者一覧](https://github.com/airbnb/javascript/graphs/contributors)\r\n\r\n## <a name='license'>ライセンス</a> [原文](https://github.com/airbnb/javascript#license)\r\n\r\nMITライセンス\r\n \r\n著作権(c)　2012 Airbnb\r\n\r\nこのソフトウェアおよび関連する文書ファイル（以下「本ソフトウェア」という。）の複製物を取得するあらゆる者に対し、\r\n以下の条件にしたがって本ソフトウェアを制限なしに扱うことを無償で許諾する。\r\nそこには、本ソフトウェアの複製を使用し、複製し、改変し、結合し、公表し、頒布し、サブライセンスし、\r\nおよび/または販売する権利、また、本ソフトウェアを与えられた者に上記のようにすることを許諾する権利を含むがそれらに限られない。\r\n\r\n上記の著作権表示および本許諾表示は「本ソフトウェア」のすべての複製物または重要部分の中に含めなければならない。\r\n\r\n「本ソフトウェア」は「現状のまま」で提供され、明示または黙示を問わず、\r\n商品性、特定目的への適合性および非侵害を含むがそれに限られない、あらゆる種類の保証も伴わないものとする。\r\n著作者または著作権者は、契約、不法行為またはその他の行為であるかにかかわらず、\r\nソフトウェアまたはソフトウェアの使用もしくはその他の取り扱いから、またはそれらに関連して生じた、\r\nいかなるクレーム、損害賠償その他の責任を負わない。\r\n\r\n**[[⬆]](#TOC)**\r\n\r\n# };\r\n","google":"UA-43140384-1","note":"Don't delete this file! It's used internally to help with page regeneration."}